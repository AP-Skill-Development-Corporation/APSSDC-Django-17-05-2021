Good Evening to all...!!!

Yesterday Session:
	Git&GitHub Distributed Version Control System
		Centralized &Distributed Version Control System
		
		
		
		


Today Agenda:
	-->Practical Session on LinuxCommands
		-->touch ->create file or files
		-->Editor:
				nano,vim
		-->nano filename
			-saving-ctrl+o
			-Exit-ctrl+x
		->Cat sourcefile >> destination
		->cp(Copy) -copy files or folders from one location to 
		cp source.txt Destination2.txt
				  528  ls
				  529  cp source.txt myfile.txt
				  530  ls
				  531  cat myfile.txt
				  532  cat source.txt >>myfile2.txt
				  533  ls
				  534  cat myfile2.txt
				  535  history >> data.txt
				  
		->MV(Move) - Move Files or Folders from One location another location
			->When Ever moving Files from Source to destination Source file or folder is deleted automatically
			->mv data.txt mydata.txt
			Source
			-->create Two Folder inside our repository(folder)-Source and Destination
			->mv *.txt source
			


		->rm Multiple files at a time
		->cat filename-just access data to the file
		->Echo "Message" - it is displaying somthing into command
		
	-->Practical Session on GitCommands
		->Git Configuration in to Local System
				1).local
						one particular folder
						myproject
							needed
							Commands:
								git config user.name "vijay"
								git config user.email "vijay10022@gmail"
					project
						needed
						Commands:
							git config user.name "vijay"
							git config user.email "vijay10022@gmail"
				2).global
						Entire System
						
					one time configuration
						Commands:
							git config --global user.name "vijay"
							git config --global user.email "vijay10022@gmail.com"
		
			->create onefile
			->git status
			->git add --a
			->git commit -m "Some files added"
			->git remote add remotename(userdefined) url(https://github.com/readytoashare/APSSDC-Django-Batch-1.git)
			->git remote -v
			->git push -u apssdc master
	-->Git Commit->Saving info
			,PUSH-->Inserting ,
			PULL-->After updating in cloud chages are updated in local
			,Clone-->to access entire diretory into local system 
			forking-->github-->any reposotory added into our github
	-->Profile Creation
	
		Markdown syntax:
			
	Day-3[19-05-2021]
	Today Agenda:
			Editors or IDES:
					-->Online Editors or IDE's
					-->offline Editors or IDE's
							Anacoda Navigator:
									- jupyternotebook
									- spyder
							- Sublime
							- VS(Visual Studio Editor)
							- Pycharm
			->Opp's in python
				- class(logical Entity )
					- Design,blueprint
					Ex:House plan(2 bed room 1 kitchen 1 bathroom 1 hall)
						systax:
							class classname:
									variables
									methods
							ex:
								class House:
										bedrooms=2
										kitchen=1
										hall=1
										bathroom=1
										
										
						
				- object(physical entity or instance of class) - Memory
					house1=House()
						house1.bedrooms
						house1.kithen
						house1.hall
						house1.athroom
						
					house2=House()
					house3=House()
					
				Method:
					Nothing but Funtion
					function with in the class -->method
					function outside the class -->function
					
				- Construtor
					-->special kind of Method in python
					-->we can create Construtor by using def
					-->The name of the Construtor should be __init__(self)
					-->self is the first argument
					-->the main purpose of Construtor is to initilize instance of global variable
					
					class Student():
							def __init__(self):
								print("Hello iam Construtor")
					
				- inheritance types
						process of creating new class
						 by properties of existing class
						 (aquiring properties from parent class to child class)
						 
					->single Level
						single parent class and single child class
						sytax:
							class Parent():
								def myfun1(self):
									print("i am from parent class and myfun1 method")
							class child(Parent):
									def myfun2(self):
										print("i am from Child class and myfun2 method")
					->multi level
						Syntax:
							class A:
								pass
								m1
								m1
							class B(A):
								pass
								m2
								m1,m2
							class C(B):
								pass
								m3
								m1,m2,m3
							class D(C):
								pass
								m4
								m1,m2,m3,m4
					->Multiple
						syntax:
							class A:
								pass 
								m1
							class B:
								pass
								m2
							class C(A,B):
								pass
								m3
								m1,m2,m3
					->Hirarichical
						one parent with multiple childs
						syntax:
							class Parent:
								pass 
								m1
							class child1(Parent):
								pass
								m2
							class Child2(parent):
								pass
								m3
							class Child3(Parent):
								pass
								m4
					->hybrid
							(muliple+multi level)
							syntax:
								class A:
									m1
								class B(A):
										m2
								class C:
									m3
								class D(A,B,C):
									m4
				->Polymorphism
						->over loading
						->overriding
					
				->Abstration
					
				->Encapulation
			->Packages & Modules using opp's
						package ->one folder(Numpy)
						--------
						from Mypackage import mymodule
						obj=mymodule.Student()
						obj.mymet()
						
						
						from Mypackage import mymodule as mm
							
						from Mypackage.mymodule import Student,Employee
						
						module -->one file(.py)
						---------
						
						import mymodule
						obj=mymodule.Studet()
						obj.mymet()
						import module as mm
						obj=mm.Student()
						obj.mymet()
		
	
		Today Agenda[20-05-2021]
		
			What is the Diff b/w Desiging and Development?
						Design layout(Bluprint)[FrontEnd Design]-->Html,CSS,BS4(Bootstrap4),JS ...
						Development:(Frontend +BackEnd)-->Java,Reactjs,Python,Html,BS4,CSS,JS Etc..
						
									Java=Spring,Hybernet,
									Python->Flask,Django,py etc..
									
									
			-->intro about django
					-->Framework comes under python
					-->Dynamic in nature(Predefined or Predeveloped Application are implemented inernally)
					-->Free and open source 
					-->MVT Arachitecture
					-->Maintained by DSF(Django Software Foundation)
					-->http://www.djangoproject.com
					-->it is Created in the year of 2003 and it is opensourse in 2005
					-->Fast,Secure,Scalable
					
			-->Design Pattern
						- MVT(Model View Templates)(paint) or MTV(Model Template View)
							M-Model--Backend-Storage(Database)
							V-View --Coding part--Bussiness logic
							T-Template--Userinterface-html pages(Html,CSS,JS,BS)
						- MVC(Model View Controller)
							M-Model -Database
							V-View - Templates(Userinterface)
							C-Controller -Business  logic
			-->Current Version:3.2.3
			-->installaion
				Open Command Promt 
					-> pip install django
			-->For cheking  Django Version
					open command Promt
						-->python
						-->import Django
						-->django.__version__
			-->for development Django project
					-->Python version(3.6 and 3.7)
					
						
			-->	Servers
					-->Django Server
							
					-->Apache(XAMPP),Nginx using WSGI,Gunicorn
			-->DataBases:(RDMS)-Relational Database Management System
					-->SQLite3
					-->Other Databases
						->PostgreSQL
						->Oracle
						->MariaDB
						->MYSQL
			-->Template Engine
					PHP-->Twig
					RUBY-->Liquid
					Pyhton->DTL(Dajngo Templates Langiage ),Jinja
						DTL(Dajngo Templates Langiage )
							for Single line Staments
									-->{{}}
							for checking condition
								-->{% if condition %}
									{% else %}
									{% endif%}
							for iteration
								-->{% for %}
									{% endfor %}
			-->Django Project Creation[img]
				-->Open Your Project Location
						-->Desktop/APSSDC-Django-Batch-1
							mkdir Django_projects
						-->Desktop/APSSDC-Django-Batch-1/Django_project
							-->django-admin startproject projectname
								ex:django-admin startproject demo_project
							-->demo_project
								-->demo_project
									-->__init__.py	This is emty file it is consider as apython file
									-->asgi.py asgi(asynchronous gateway interface)- hosting
									-->urls.py	->to navigate other pages
									-->settings.py -->Everything is configure this file(Database,application,Templates,Media,static)
									-->wsgi.py -->(web service Gateway interface)- hosting
								-->manage.py -->main part of project
												Server running
												Databases migrate
												application
			-->Run Project
				cd demo_project
					->python manage.py runserver
					->http://127.0.0.1:8000/
					->to stop server
							->ctrl+c
					if you want to change port number
						-->python manage.py runserver 6000
				-->insted of ip 
						localhost:8000
			-->Django App Creation
					-->python manage.py startapp appname
						ex:python manage.py startapp app1
							app1:
								migrations folde :Data base script files
								__init__.py :this just python
								models.py :Data base Files 
								test.py :scripting
								app.py	: application is configure
								admin.py : database models inside admin it is reflect into admin pannel
								view.py :main file in application :Business login
			Editors:
					->sublime
					->VS
						project
							__init__.py
							settings.py
							urls.py
							asgi.py
							swgi.py
							app1
								migrations
								__init__.py
								models.py
								test.py
								app.py
								admin.py
								views.py
							app2   
								migrations
								__init__.py
								models.py
								test.py
								app.py
								admin.py
								views.py
							app3
								migrations
								__init__.py
								models.py
								test.py
								app.py
								admin.py
								views.py
						manage.py
					->pycharm
					
					
			-->Project Navigation
						-->Python manage.py runserver
						
				-->Manage.py -->settings.py -->urls.py -->app1 -->Views.py -->models/templates
			-->Url Mapping
			-->Dynamic Url Mapping
				
				
		Good Evening to all...!!!
	wait for few minutes others can join the session

Day-6[Agenda]:
	-->Data Rendaring from vews to templates
	-->Data Rendaring from Templates to Views
	-->Model(DataBase Creation)
	-->Migrations
		-->makemigrations
			class model -->python script
		ex:python manage.py makemigration
		-->migrate
			python script -->tables
		ex:python manage.py migrate
		sqlite3
			-->tool -->DB Browser
	-->ORM(object Relational Mapping)-Quiries with Shell
		->python manage.py shell 
		
		Store the data:
				2 ways:
					1).obj=Modelname(fildname="",fildname="",etc..)
					   obj.save()
					2).Modelname.object.create(fildname="",fildname="",etc..)

	Employee1:
		index.html
	Employee2:
		index.html

